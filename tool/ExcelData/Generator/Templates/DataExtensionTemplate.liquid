//<auto-generated/>
#nullable enable
using System;
using System.Data;
using System.Threading.Tasks;
using System.Data.SqlClient;

namespace {{d.namespace}}
{
    public enum DataFlavours
    {
        Seed,
        Integration,
        Demo
    }

    public static class TestDataHelper
    {
        public static async Task PopulateData(string connectionString, params DataFlavours[] flavours)
        {
            if (string.IsNullOrEmpty(connectionString))
                throw new ArgumentNullException(nameof(connectionString));

            if (flavours is null || flavours.Length <= 0)
                throw new ArgumentNullException(nameof(flavours));

            await using SqlConnection connection = new(connectionString);
            await connection.OpenAsync();

            foreach (DataFlavours flavor in flavours)
            {
                switch (flavor)
                {
{% for flavour in d.flavours -%}
                    case DataFlavours.{{flavour.name}}:
                        await {{flavour.name}}Data.Populate(connection).ConfigureAwait(false);
                        break;

{% endfor -%}
                }
            }

            await connection.CloseAsync();
        }
    }

{% for flavour in d.flavours -%}
    public static class {{flavour.name}}Data
    {
        public static async Task Populate(SqlConnection connection)
        {
{% for tableData in flavour.table_data -%}
{%      if tableData.data_rows.size > 0 -%}
            await Populate{{tableData.name}}Data(connection).ConfigureAwait(false);
{%      endif -%}
{% endfor -%}
        }

{% for tableData in flavour.table_data -%}
{%      if tableData.data_rows.size > 0 -%}
        private static async Task Populate{{tableData.name}}Data(SqlConnection connection)
        {
{%          if tableData.contains_identity_column -%}
             const string insertCommand =
                "SET IDENTITY_INSERT {{tableData.name}} ON; INSERT INTO {{tableData.name}} ({% for tableColumn in tableData.table_columns -%} {{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%})" +
                "VALUES ({% for tableColumn in tableData.table_columns -%} @{{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%}); SET IDENTITY_INSERT {{tableData.name}} OFF;";
{%         else -%}
            const string insertCommand =
                "INSERT INTO {{tableData.name}} ({% for tableColumn in tableData.table_columns -%} {{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%})" +
                "VALUES ({% for tableColumn in tableData.table_columns -%} @{{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%});";
{%          endif -%}

            using SqlCommand command = new SqlCommand(insertCommand, connection);
{%      for tableColumn in tableData.table_columns -%}
            command.Parameters.Add("@{{tableColumn.name}}", @{{tableColumn.db_type}});
{%      endfor -%}

{%      for tableRows in tableData.data_rows -%}
            await command.Execute{{tableData.name}}Data({% for rows in tableRows -%}{% assign row_index = forloop:index0 -%}{% if tableData.table_columns[row_index].db_type contains "VarChar" or tableData.table_columns[row_index].db_type contains "Xml" -%} "{{rows | replace: '\"', '\"'}}" {% else -%} {{rows}} {% endif -%} {% if forloop.last == false -%}, {% endif -%}{% endfor -%});
{%      endfor -%}
{% comment -%}
{%      for tableColumn1 in tableData.table_columns limit:1 -%}
{%          for row1 in tableColumn1.column_rows -%}
{%              assign row_index = forloop:index0 -%}
            await command.Execute{{tableData.name}}Data({% for tableColumn in tableData.table_columns -%}{% assign row_index_value = tableColumn.column_rows[row_index] -%} "{{row_index_value | replace: '"', '\"'}}"{% if forloop.last == false -%}, {% endif -%} {% endfor -%});
{%          endfor -%}
{%      endfor -%}
{% endcomment -%}
{% comment -%}
            using SqlConnection con = new SqlConnection(_connectionString);
            con.Open();

{%      for tableColumn1 in tableData.table_columns limit:1 -%}
{%          for row1 in tableColumn1.column_rows -%}
{%          assign row_index = forloop:index0 -%}
            using SqlCommand command_{{row_index}} = new SqlCommand("INSERT INTO {{tableData.name}} ({% for tableColumn in tableData.table_columns -%} {{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%})" +
                            "VALUES ({% for tableColumn in tableData.table_columns -%}{% assign row_index_value = tableColumn.column_rows[row_index] -%} '{{row_index_value | replace: '"', '\"'}}'{% if forloop.last == false -%}, {% endif -%} {% endfor -%})", con);
            command_{{row_index}}.ExecuteNonQuery();


            context.{{tableData.name}}.Add(new {{tableData.name}}
            {
{%              for tableColumn in tableData.table_columns -%}
{%              assign row_index_value = tableColumn.column_rows[row_index] -%}
{%                  if tableColumn.type == "String" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{row_index_value}}",
{%                  elsif tableColumn.type == "DateTime" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{DateTime.Parse("row_index_value");}}",
{%                  elsif tableColumn.type == "DateTimeOffset" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{DateTimeOffset.Parse("row_index_value");}}",
{%                  elsif tableColumn.type == "Decimal" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{Convert.ToDecimal(row_index_value);}}",
{%                  elsif tableColumn.type == "Float" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{Convert.ToDouble(row_index_value);}}",
{%                  elsif tableColumn.type == "Guid" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{new Guid("row_index_value");}}",
{%                  elsif tableColumn.type == "Byte" and  row_index_value != "null" -%}
                {{tableColumn.name}} = "{{Convert.ToByte(row_index_value);}}",
{%                  else -%}
                {{tableColumn.name}} = {{row_index_value}},
{%                  endif -%}
{%              endfor -%}
            });

{%          endfor -%}
            con.Close();
{% endcomment -%}
        }

        private static async Task Execute{{tableData.name}}Data(this SqlCommand command, {% for tableColumn in tableData.table_columns -%}{{tableColumn.c_sharp_type}} {{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%})
        {
{% for tableColumn in tableData.table_columns -%}
{%      assign colindex = forloop:index0 -%}
            command.Parameters[{{colindex}}].Value = {{tableColumn.name}};
{% endfor -%}

            await command.ExecuteNonQueryAsync();
        }
{%      endif -%}
{% endfor -%}
    }
{% endfor -%}
}
