namespace Datask.Tool.ExcelData;

[Command("validate", "v")]
[CommandHelp("Validates xlsx file with database schema, list and fix the differences.")]
public sealed class ValidateCommand : BaseCommand
{
    [Argument(Order = 0)]
    [ArgumentHelp("file name", "The name of the Excel file to validate.")]
    public FileInfo ExcelFile { get; set; } = null!;

    [Argument(Order = 1)]
    [ArgumentHelp("server connection string", "The server connection string to deploy the database.")]
    public string ServerConnectionString { get; set; } = null!;

    [Argument(Order = 2)]
    [ArgumentHelp("db script folder", "The database scripts folder.")]
    public string DbScriptFolder { get; set; } = null!;

    [Flag("fix")]
    [FlagHelp("Fix the differences.")]
    public bool Fix { get; set; }

    protected override async Task<int> ExecuteAsync(StatusContext ctx, IParseResult parseResult)
    {
        if (!File.Exists(ExcelFile.FullName))
            throw new FileNotFoundException($"[Red]File {ExcelFile.FullName} not found.");

        //Deploy database and run scripts from DbScriptFolder
        if (!Directory.Exists(DbScriptFolder))
            throw new DirectoryNotFoundException($"[Red]Directory {DbScriptFolder} not found.");

        //Validate the difference
        SchemaValidator validator = new("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Configuration;Integrated Security=SSPI;",
            ExcelFile.FullName);

        validator.OnStatus += (_, args) =>
        {
            ctx.Status(args.Message ?? string.Empty);
            ctx.Refresh();
        };

        List<TableDiff> differences = await validator.Validate();
        AnsiConsole.WriteLine();
        foreach (TableDiff tableDiff in differences)
        {
            AnsiConsole.MarkupLine($"[Cyan]Table : [/] [Green]{tableDiff.Name}[/]");
            if (tableDiff.State != State.NoChange)
                AnsiConsole.MarkupLine($"[Cyan]State : [/] [Green]{tableDiff.State}[/]");

            foreach (ColumnDiff colDiff in tableDiff.Columns)
            {
                AnsiConsole.WriteLine();
                AnsiConsole.MarkupLine($"[Cyan]Column : [/] [Green]{colDiff.Name}[/]");
                if (colDiff.State != State.NoChange)
                    AnsiConsole.MarkupLine($"[Cyan]State : [/] [Green]{colDiff.State}[/]");

                if (colDiff.Metadata == null)
                    continue;

                AnsiConsole.MarkupLine("[Cyan]Metadata Difference : [/]");
                foreach (MetadataDiff metadataDiff in colDiff.Metadata)
                {
                    switch (metadataDiff)
                    {
                        case MaxLengthMetadataDiff maxLength:
                            AnsiConsole.MarkupLine($"[Magenta]    MaxLength  [/]");
                            PrintDiff(maxLength.OldValue, maxLength.NewValue);
                            break;
                        case IsNullableMetadataDiff isNullable:
                            AnsiConsole.MarkupLine($"[Magenta]    IsNullable [/]");
                            PrintDiff(isNullable.OldValue, isNullable.NewValue);
                            break;
                        case IsPrimaryKeyMetadataDiff isPrimaryKey:
                            AnsiConsole.MarkupLine($"[Magenta]    IsPrimaryKey [/]");
                            PrintDiff(isPrimaryKey.OldValue, isPrimaryKey.NewValue);
                            break;
                        case IsIdentityMetadataDiff isIdentityKey:
                            AnsiConsole.MarkupLine($"[Magenta]    IsIdentity [/]");
                            PrintDiff(isIdentityKey.OldValue, isIdentityKey.NewValue);
                            break;
                        case IsAutogeneratedMetadataDiff isAutogenerated:
                            AnsiConsole.MarkupLine($"[Magenta]    IsAutogenerated [/]");
                            PrintDiff(isAutogenerated.OldValue, isAutogenerated.NewValue);
                            break;
                        case IsForeignKeyMetadataDiff isForeignKey:
                            AnsiConsole.MarkupLine($"[Magenta]    IsForeignKey [/]");
                            PrintDiff(isForeignKey.OldValue, isForeignKey.NewValue);
                            AnsiConsole.MarkupLine($"[Yellow]        ForeignKey Table [/]");
                            PrintDiff(isForeignKey.OldFkTable, isForeignKey.NewFkTable);
                            AnsiConsole.MarkupLine($"[Yellow]        ForeignKey Column [/]");
                            PrintDiff(isForeignKey.OldFkColumn, isForeignKey.NewFkColumn);
                            break;
                        case DatatypeMetadataDiff datatype:
                            AnsiConsole.MarkupLine("[Magenta]    Datatype [/]");
                            AnsiConsole.MarkupLine($"[Yellow]        Native Type [/]");
                            PrintDiff(datatype.OldNativeType, datatype.NewNativeType);
                            AnsiConsole.MarkupLine($"[Yellow]        Type [/]");
                            PrintDiff(datatype.OldType, datatype.NewType);
                            AnsiConsole.MarkupLine($"[Yellow]        SQL Type [/]");
                            PrintDiff(datatype.OldDbType, datatype.NewDbType);
                            break;
                        default:
                            break;
                    }
                }
            }
            AnsiConsole.WriteLine();
            AnsiConsole.WriteLine("************************************************************************************************************************************************************************************************************");
            AnsiConsole.WriteLine();
        }

        return 0;
    }

    private void PrintDiff(object oldValue, object newValue)
    {
        AnsiConsole.MarkupLine($"[Blue]        OldValue - [/] [Green]{oldValue}[/]");
        AnsiConsole.MarkupLine($"[Blue]        NewValue - [/][Green]{newValue}[/]");
    }
}
