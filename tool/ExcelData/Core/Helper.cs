using System.Text.Json;

using Datask.Common.Utilities;
using Datask.Providers.Schemas;

namespace Datask.Tool.ExcelData.Core
{
    internal static class Helper
    {
        internal static void Sort(IList<TableDefinition> tables)
        {
            TableForeignKeyComparer comparer = new();
            for (int i = 0; i < tables.Count - 1; i++)
            {
                for (int j = i + 1; j < tables.Count; j++)
                {
                    if (comparer.Compare(tables[i], tables[j]) > 0)
                    {
                        (tables[i], tables[j]) = (tables[j], tables[i]);
                    }
                }
            }
        }

        internal static string BuildMetadata(ColumnDefinition column)
        {
            dynamic metadata = new
            {
                column.Name,
                NativeType = column.DatabaseType,
                Type = TypeDisplay.GetTypeName(column.Type, "System"),
                DbType = column.DbType.ToString(),
                column.MaxLength,
                column.IsPrimaryKey,
                column.IsIdentity,
                column.IsNullable,
                column.IsForeignKey,
                column.IsAutoGenerated,
            };

            if (column.IsForeignKey)
            {
                metadata = new
                {
                    column.Name,
                    NativeType = column.DatabaseType,
                    Type = TypeDisplay.GetTypeName(column.Type, "System"),
                    DbType = column.DbType.ToString(),
                    column.MaxLength,
                    column.IsPrimaryKey,
                    column.IsIdentity,
                    column.IsNullable,
                    column.IsForeignKey,
                    ForeignKeyTable = $"{column.ForeignKey?.Schema}.{column.ForeignKey?.Table}",
                    ForeignKeyColumn = column.ForeignKey?.Column,
                    column.IsAutoGenerated,
                };
            }

            string serializedMetadata = JsonSerializer.Serialize(metadata, new JsonSerializerOptions
            {
                WriteIndented = true,
            });
            return serializedMetadata;
        }

        internal static readonly Dictionary<Type, string> TypeAliases = new Dictionary<Type, string>
        {
            { typeof(byte), "byte" },
            { typeof(sbyte), "sbyte" },
            { typeof(short), "short" },
            { typeof(ushort), "ushort" },
            { typeof(int), "int" },
            { typeof(uint), "uint" },
            { typeof(long), "long" },
            { typeof(ulong), "ulong" },
            { typeof(float), "float" },
            { typeof(double), "double" },
            { typeof(decimal), "decimal" },
            { typeof(object), "object" },
            { typeof(bool), "bool" },
            { typeof(char), "char" },
            { typeof(string), "string" },
            { typeof(void), "void" },
            { typeof(byte?), "byte?" },
            { typeof(sbyte?), "sbyte?" },
            { typeof(short?), "short?" },
            { typeof(ushort?), "ushort?" },
            { typeof(int?), "int?" },
            { typeof(uint?), "uint?" },
            { typeof(long?), "long?" },
            { typeof(ulong?), "ulong?" },
            { typeof(float?), "float?" },
            { typeof(double?), "double?" },
            { typeof(decimal?), "decimal?" },
            { typeof(bool?), "bool?" },
            { typeof(char?), "char?" }
        };
    }
}
