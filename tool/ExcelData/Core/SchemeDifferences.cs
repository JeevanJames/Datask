using System.Data;
using System.Text.Json;

using Datask.Providers.Schemas;

namespace Datask.Tool.ExcelData.Core
{
    public record TableDiff
    {
        public TableDiff(string name)
        {
            Name = name;
        }

        public string Name { get; }

        public State State { get; set; } = State.NoChange;

        public string OldTableName { get; set; } = null!;

        public IList<ColumnDiff> Columns { get; } = new List<ColumnDiff>();
    }

    public record ColumnDiff
    {
        public ColumnDiff(string name)
        {
            Name = name;
        }

        public string Name { get; set; } = null!;

        public State State { get; set; } = State.NoChange;

        public IEnumerable<MetadataDiff> Metadata { get; set; } = null!;
    }

    public abstract record MetadataDiff
    {
        internal static IEnumerable<MetadataDiff> Create(string jsonDiff, ColumnDefinition columnDefinition)
        {
            IList<MetadataDiff> metadataDiffs = new List<MetadataDiff>();

            Dictionary<string, object[]>? response = JsonSerializer.Deserialize<Dictionary<string, object[]>>(jsonDiff);

            if (response != null)
            {
                foreach (KeyValuePair<string, object[]> item in response)
                {
                    switch (item.Key.ToLower())
                    {
                        case "maxlength":
                            MaxLengthMetadataDiff maxLengthDiff = new(Convert.ToInt32(item.Value[1].ToString()), Convert.ToInt32(item.Value[0].ToString()));
                            metadataDiffs.Add(maxLengthDiff);
                            break;
                        case "isnullable":
                            IsNullableMetadataDiff isNullableDiff = new(Convert.ToBoolean(item.Value[1].ToString()), Convert.ToBoolean(item.Value[0].ToString()));
                            metadataDiffs.Add(isNullableDiff);
                            break;
                        case "isprimarykey":
                            IsPrimaryKeyMetadataDiff isPrimaryKeyDiff = new(Convert.ToBoolean(item.Value[1].ToString()), Convert.ToBoolean(item.Value[0].ToString()));
                            metadataDiffs.Add(isPrimaryKeyDiff);
                            break;
                        case "isidentity":
                            IsIdentityMetadataDiff isIdentityDiff = new(Convert.ToBoolean(item.Value[1].ToString()), Convert.ToBoolean(item.Value[0].ToString()));
                            metadataDiffs.Add(isIdentityDiff);
                            break;
                        case "isautogenerated":
                            IsAutogeneratedMetadataDiff isAutogeneratedDiff = new(Convert.ToBoolean(item.Value[1].ToString()), Convert.ToBoolean(item.Value[0].ToString()));
                            metadataDiffs.Add(isAutogeneratedDiff);
                            break;
                        case "isforeignkey":
                            IsForeignKeyMetadataDiff isForeignKeyDiff = new(Convert.ToBoolean(item.Value[1].ToString()),
                            Convert.ToBoolean(item.Value[0].ToString()));

                            if (response.TryGetValue("ForeignKeyTable", out object[]? fkTable))
                            {
                                isForeignKeyDiff.OldFkTable = item.Value[1].ToString();
                                isForeignKeyDiff.NewFkTable = item.Value[0].ToString();
                            }

                            if (response.TryGetValue("ForeignKeyColumn", out object[]? fkColumn))
                            {
                                isForeignKeyDiff.OldFkColumn = item.Value[1].ToString();
                                isForeignKeyDiff.NewFkColumn = item.Value[0].ToString();
                            }

                            metadataDiffs.Add(isForeignKeyDiff);
                            break;
                        case "nativetype":
                            Type cOldType;
                            Type cNewType;
                            DbType dbOldType;
                            DbType dbNewType;

                            if (response.TryGetValue("Type", out object[]? type))
                            {
                                cOldType = Helper.TypeAliases.FirstOrDefault(x => x.Value == type[1].ToString()).Key;
                                cNewType = Helper.TypeAliases.FirstOrDefault(x => x.Value == type[0].ToString()).Key;
                            }
                            else
                            {
                                cOldType = columnDefinition.Type;
                                cNewType = columnDefinition.Type;
                            }

                            if (response.TryGetValue("DbType", out object[]? dbType))
                            {
                                dbOldType = Enum.TryParse(dbType[1].ToString(), out DbType olddbType) ? olddbType : default;
                                dbNewType = Enum.TryParse(dbType[0].ToString(), out DbType oldNewType) ? oldNewType : default;
                            }
                            else
                            {
                                dbOldType = columnDefinition.DbType;
                                dbNewType = columnDefinition.DbType;
                            }

                            DatatypeMetadataDiff dataTypeDiff = new(cOldType, cNewType, item.Value[1].ToString(), item.Value[0].ToString(), dbOldType, dbNewType);
                            metadataDiffs.Add(dataTypeDiff);
                            break;
                        default:
                            break;
                    }
                }
            }

            return metadataDiffs;
        }
    }

    public abstract record MetadataSimpleDiff<T> : MetadataDiff
    {
        private protected MetadataSimpleDiff(T oldValue, T newValue)
        {
            OldValue = oldValue;
            NewValue = newValue;
        }

        public T OldValue { get; }

        public T NewValue { get; }
    }

    public record MaxLengthMetadataDiff : MetadataSimpleDiff<int>
    {
        internal MaxLengthMetadataDiff(int oldValue, int newValue) : base(oldValue, newValue)
        {
        }
    }

    public record IsPrimaryKeyMetadataDiff : MetadataSimpleDiff<bool>
    {
        internal IsPrimaryKeyMetadataDiff(bool oldValue, bool newValue) : base(oldValue, newValue)
        {
        }
    }

    public record IsIdentityMetadataDiff : MetadataSimpleDiff<bool>
    {
        internal IsIdentityMetadataDiff(bool oldValue, bool newValue) : base(oldValue, newValue)
        {
        }
    }

    public record IsNullableMetadataDiff : MetadataSimpleDiff<bool>
    {
        internal IsNullableMetadataDiff(bool oldValue, bool newValue) : base(oldValue, newValue)
        {
        }
    }

    public record IsForeignKeyMetadataDiff : MetadataSimpleDiff<bool>
    {
        internal IsForeignKeyMetadataDiff(bool oldValue, bool newValue)
            : base(oldValue, newValue)
        {
        }

        public string OldFkTable { get; set; } = null!;

        public string NewFkTable { get; set; } = null!;

        public string OldFkColumn { get; set; } = null!;

        public string NewFkColumn { get; set; } = null!;
    }

    public record IsAutogeneratedMetadataDiff : MetadataSimpleDiff<bool>
    {
        internal IsAutogeneratedMetadataDiff(bool oldValue, bool newValue) : base(oldValue, newValue)
        {
        }
    }

    public record DatatypeMetadataDiff : MetadataDiff
    {
        internal DatatypeMetadataDiff(Type oldType, Type newType,
            string oldNativeType, string newNativeType, DbType oldDbType, DbType newDbType)
        {
            OldType = oldType;
            NewType = newType;
            OldDbType = oldDbType;
            NewDbType = newDbType;
            OldNativeType = oldNativeType;
            NewNativeType = newNativeType;
        }

        public Type OldType { get; set; }

        public Type NewType { get; set; }

        public string OldNativeType { get; set; }

        public string NewNativeType { get; set; }

        public DbType OldDbType { get; set; }

        public DbType NewDbType { get; set; }
    }

    public enum State
    {
        Added,
        Deleted,
        Renamed,
        NoChange
    }
}
