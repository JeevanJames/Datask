//<auto-generated/>
#nullable enable
using System;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;

namespace {{model.namespace}}
{
    public enum DataFlavors
    {
        Seed,
        Integration,
        Demo
    }

    public static class TestDataHelper
    {
        public static async Task PopulateData(string connectionString, params DataFlavors[] flavors)
        {
            if (string.IsNullOrEmpty(connectionString))
                throw new ArgumentNullException(nameof(connectionString));

            if (flavors is null || flavors.Length <= 0)
                throw new ArgumentNullException(nameof(flavors));

            await using SqlConnection connection = new(connectionString);
            await connection.OpenAsync().ConfigureAwait(false);

            foreach (DataFlavors flavor in flavors)
            {
                switch (flavor)
                {
{% for flavor in model.flavors -%}
                    case DataFlavors.{{flavor.name}}:
                        await {{flavor.name}}Data.Populate(connection).ConfigureAwait(false);
                        break;

{% endfor -%}
                }
            }

            await connection.CloseAsync().ConfigureAwait(false);
        }
    }

