        private static async Task Populate_{{model.table.schema}}_{{model.table.name}}_Data(SqlConnection connection)
        {
            const string insertCommand =
                "INSERT INTO [{{model.table.schema}}].[{{model.table.name}}] ({% for tableColumn in model.table.columns -%} {{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%})" +
                "VALUES ({% for tableColumn in model.table.columns -%} @{{tableColumn.name}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%});";

{%          if model.has_identity_column -%}
{%              assign indentation = "                " -%}
{%          else -%}
{%              assign indentation = "            " -%}
{%          endif -%}
{%          if model.has_identity_column -%}
            await TestDataHelper.SetIdentity(connection, "[{{model.table.schema}}].[{{model.table.name}}]", true).ConfigureAwait(false);

            try
            {
{%          endif -%}
{{indentation}}await using DbCommand command = new SqlCommand(insertCommand, connection);
{%      for tableColumn in model.table.columns -%}
{{indentation}}command.Parameters.Add(new SqlParameter { DbType = {{tableColumn.database_type}}, ParameterName = "{{tableColumn.name}}", Size = {{tableColumn.parameter_size}} });
{%      endfor -%}

{%      for fr in model.fullRows -%}
{{indentation}}await command.Insert_{{model.table.schema}}_{{model.table.name}}_Row({{fr}}).ConfigureAwait(false);
{%      endfor -%}
{%          if model.has_identity_column -%}
            }
            finally
            {
                await TestDataHelper.SetIdentity(connection, "[{{model.table.schema}}].[{{model.table.name}}]", false).ConfigureAwait(false);
            }
{%          endif -%}
        }

        private static async Task Insert_{{model.table.schema}}_{{model.table.name}}_Row(this DbCommand command, {% for tableColumn in model.table.columns -%}{{tableColumn.c_sharp_type}}{% if tableColumn.is_nullable %}?{% endif %} {{tableColumn.name | remove: "-" | remove: "_" | remove: "."}}{% if forloop.last == false -%}, {% endif -%}{% endfor -%})
        {
{% for tableColumn in model.table.columns -%}
{%      assign colindex = forloop:index0 -%}
            command.Parameters[{{colindex}}].Value = {{tableColumn.name  | remove: "-" | remove: "_" | remove: "."}}{% if tableColumn.is_nullable %} == null ? DBNull.Value : {{tableColumn.name  | remove: "-" | remove: "_" | remove: "."}}{% endif %};
{% endfor -%}

            command.Prepare();

            await command.ExecuteNonQueryAsync().ConfigureAwait(false);
        }

