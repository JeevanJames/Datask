using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

using CodeBits;

using Datask.Common.Utilities;
using Datask.Providers;
using Datask.Providers.Schemas;
using Datask.Providers.SqlServer;

using JsonDiffPatchDotNet;

using OfficeOpenXml;
using OfficeOpenXml.Table;

namespace Datask.Tool.ExcelData.Core
{
    public class SchemaValidator
    {
#pragma warning disable S3264 // Events should be invoked
        public event EventHandler<StatusEventArgs<StatusEvents>> OnStatus = null!;
#pragma warning restore S3264 // Events should be invoked
        private readonly string _connectionString;
        private readonly string _excelPath;

        public SchemaValidator(string connectionString, string excelPath)
        {
            _connectionString = connectionString;
            _excelPath = excelPath;
        }

        public async Task<List<TableDiff>> Validate()
        {
            OnStatus.Fire(StatusEvents.Validate, null,
                "Verifing the differences...");

            return await FindSchemaDiff();
        }

        private async Task<List<TableDiff>> FindSchemaDiff()
        {
            //Get database tables in sort order
            IList<TableDefinition> dbTables = await GetDbTables();

            //Get excel tables
            FileInfo existingFile = new(_excelPath);
            using ExcelPackage package = new(existingFile);
            IEnumerable<ExcelTable>? excelTables = package.Workbook.Worksheets.SelectMany(_ => _.Tables);

            List<TableDiff> schemeDifferences = new();

            //Find any new tables added or deleted
            IEnumerable<TableDefinition> filteredTables = FindTableDiff(dbTables, excelTables, schemeDifferences);

            //Find any new columns added or deleted
            FindColumnDiff(excelTables, schemeDifferences, filteredTables);
            return schemeDifferences;
        }

        private void FindColumnDiff(IEnumerable<ExcelTable> excelTables, List<TableDiff> schemeDifferences, IEnumerable<TableDefinition> filteredTables)
        {
            foreach (TableDefinition dTable in filteredTables)
            {
                OnStatus.Fire(StatusEvents.Validate, new { Table = dTable.Name },
                "Verifing the {Table} differences...");

                string tableName = $"{dTable.Schema }.{dTable.Name}";
                TableDiff tableSchema = new(tableName);

                ExcelTable excelTable = excelTables.FirstOrDefault(t => t.Name == tableName);

                if (excelTable == null)
                    continue;

                var dbCols = dTable.Columns.Where(c => !c.IsAutoGenerated).Select(t => t.Name).ToList();
                var exCols = excelTable.Columns.Select(t => t.Name).ToList();
                IEnumerable<string>? newCols = dbCols.Except(exCols);
                IEnumerable<string>? delCols = exCols.Except(dbCols);

                foreach (string nCols in newCols)
                {
                    tableSchema.Columns.Add(new ColumnDiff(nCols)
                    {
                        State = State.Added,
                    });
                }

                foreach (string dCols in delCols)
                {
                    tableSchema.Columns.Add(new ColumnDiff(dCols)
                    {
                        State = State.Deleted,
                    });
                }

                //Get column metadata difference
                IEnumerable<ColumnDefinition>? filteredCols = dTable.Columns
                                .Where(x => !newCols.Any(y => y == x.Name)
                                && !delCols.Any(y => y == x.Name));

                FindColumnMetadaDiff(schemeDifferences, tableSchema, excelTable, filteredCols);
            }
        }

        private static void FindColumnMetadaDiff(List<TableDiff> schemeDifferences, TableDiff tableSchema, ExcelTable excelTable, IEnumerable<ColumnDefinition> filteredCols)
        {
            ExcelRange cells = excelTable.WorkSheet.Cells["1:1"];

            foreach (ColumnDefinition filCol in filteredCols)
            {
                if (filCol.IsAutoGenerated)
                    continue;

                //compare the metadata
                ExcelTableColumn? excelColumn = excelTable.Columns.FirstOrDefault(c => c.Name == filCol.Name);
                if (excelColumn == null)
                    continue;

                //Compare the column meta data.
                ExcelRangeBase excelRangeBase = cells.First(c => c.Value.ToString() == excelColumn.Name);
                ExcelComment excelComment = excelRangeBase.Comment;

                if (excelComment == null)
                    continue;

                string colMetadata = Helper.BuildMetadata(filCol);
                var diffObj = new JsonDiffPatch();
                string? result = diffObj.Diff(colMetadata, excelComment.Text);

                if (!string.IsNullOrWhiteSpace(result))
                {
                    tableSchema.Columns.Add(new ColumnDiff(filCol.Name)
                    {
                        Metadata = MetadataDiff.Create(result, filCol),
                    });
                }
            }

            if (tableSchema.State != State.NoChange ||
                tableSchema.Columns.Any(c => c.State != State.NoChange ||
                c.Metadata.Any()))
            {
                schemeDifferences.Add(tableSchema);
            }
        }

        private static IEnumerable<TableDefinition> FindTableDiff(IList<TableDefinition> dbTables, IEnumerable<ExcelTable> excelTables, List<TableDiff> schemeDifferences)
        {
            var dbTablesNames = dbTables.Select(t => $"{t.Schema}.{t.Name}").ToList();
            var exTables = excelTables.Select(t => t.Name).ToList();
            IEnumerable<string>? newtables = dbTablesNames.Except(exTables);
            IEnumerable<string>? deletedTables = exTables.Except(dbTablesNames);

            foreach (string newTable in newtables)
            {
                schemeDifferences.Add(new TableDiff(newTable)
                {
                    State = State.Added,
                });
            }

            foreach (string delTable in deletedTables)
            {
                schemeDifferences.Add(new TableDiff(delTable)
                {
                    State = State.Deleted,
                });
            }

            IEnumerable<TableDefinition>? filteredTables = dbTables
                                .Where(x => !newtables.Any(y => y == x.FullName)
                                && !deletedTables.Any(y => y == x.FullName));
            return filteredTables;
        }

        private async Task<IList<TableDefinition>> GetDbTables()
        {
            IProvider provider = new SqlServerProvider(_connectionString);
            IList<TableDefinition> dbTables = await provider.SchemaQuery.GetTables(new GetTableOptions
            {
                IncludeColumns = true,
                IncludeForeignKeys = true,
            });
            Helper.Sort(dbTables);
            return dbTables;
        }
    }
}
