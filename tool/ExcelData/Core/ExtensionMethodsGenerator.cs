using System.Data;
using System.Reflection;
using System.Text.Json;

using Datask.Providers.Schemas;
using Datask.Tool.ExcelData.Core.Bases;

using DotLiquid;

using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;

namespace Datask.Tool.ExcelData.Core;

public sealed class ExtensionMethodsGenerator : GeneratorBase<ExtensionMethodsGeneratorOptions, StatusEvents>
{
    static ExtensionMethodsGenerator()
    {
        RegisterTypes();
    }

    public ExtensionMethodsGenerator(ExtensionMethodsGeneratorOptions options)
        : base(options)
    {
    }

    public override async Task ExecuteAsync()
    {
        if (Options.Flavors is null or { Count: 0 })
            return;

        string filePath = Options.FilePath;

        await using FileStream fileStream = File.Create(filePath);
        await using StreamWriter writer = new(fileStream);

        await writer.WriteAsync(await RenderTemplate("PopulateDataTemplate", Options)).ConfigureAwait(false);

        foreach (Flavor flavor in Options.Flavors)
        {
            FireStatusEvent(StatusEvents.Generate,
                "Generating data helper for {Flavor} information.",
                new { Flavor = flavor.Name });

            await writer.WriteAsync(await RenderTemplate("PopulateFlavorDataTemplate",
                    Options.Flavors.Count > 1 ? flavor.Name : "Default"))
                .ConfigureAwait(false);

            await using FileStream fs = new(flavor.ExcelFilePath, FileMode.Open, FileAccess.Read);
            IWorkbook workbook = new XSSFWorkbook(fs);

            int worksheetCount = workbook.NumberOfSheets;
            await PopulateConsolidatedData(writer, workbook, worksheetCount).ConfigureAwait(false);

            for (int index = 0; index < worksheetCount; index++)
            {
                var worksheet = (XSSFSheet)workbook.GetSheetAt(index);

                List<XSSFTable> worksheetTables = worksheet.GetTables();
                if (worksheetTables.Count is 0 or > 1 || worksheet.LastRowNum == 0)
                    continue;

                string[] tableName = worksheetTables[0].DisplayName.Split('.');
                if (tableName.Length is < 1 or > 2)
                    continue;

                TableBindingModel td = new(tableName[1], tableName[0]);

                FillTableData(worksheet, td, out int cellCount);

                IList<List<string?>> dataRows = FillDataRows(worksheet, td, cellCount);

                //Remove autogenerated columns like timestamp
                foreach (ColumnBindingModel col in td.Columns.Where(c => c.IsAutoGenerated).ToList())
                {
                    td.Columns.Remove(col);
                }

                flavor.TableDefinitions.Add(td);

                await writer.WriteAsync(await RenderTemplate("PopulateTableDataTemplate",
                    new
                    {
                        table = td,
                        dr = dataRows,
                        ic = td.Columns.Any(c => c.IsIdentity),
                    })).ConfigureAwait(false);
            }

            await writer.WriteAsync('}').ConfigureAwait(false);
        }

        await writer.WriteAsync('}').ConfigureAwait(false);
    }

    private async Task PopulateConsolidatedData(StreamWriter writer, IWorkbook xssWorkbook, int worksheetCount)
    {
        IList<TableBindingModel> tables = new List<TableBindingModel>();
        for (int index = 0; index < worksheetCount; index++)
        {
            var sheet = (XSSFSheet)xssWorkbook.GetSheetAt(index);

            List<XSSFTable> xssfTables = sheet.GetTables();
            if (xssfTables.Count == 0 || sheet.LastRowNum == 0)
                continue;

            string[] tableName = xssfTables[0].DisplayName.Split('.');
            tables.Add(new TableBindingModel(tableName.Skip(1).First(), tableName.Take(1).First()));
        }

        await writer.WriteAsync(await RenderTemplate("PopulateConsolidatedDataTemplate", tables
            .Select(t => t.Schema + t.Name)
            .ToList())).ConfigureAwait(false);
    }


    private static void  FillTableData(XSSFSheet sheet, TableBindingModel td, out int cellCount)
    {
        IRow headerRow = sheet.GetRow(0);
        //timestampCols = new();
        cellCount = headerRow.LastCellNum;
        for (int j = 0; j < cellCount; j++)
        {
            ICell cell = headerRow.GetCell(j);
            if (cell == null || string.IsNullOrWhiteSpace(cell.ToString()))
                continue;

            string cellComment = cell.CellComment.String.ToString();
            if (cellComment is null)
                continue;

            Dictionary<string, object>? columnMetaData = JsonSerializer.Deserialize<Dictionary<string, object>>(cellComment, new JsonSerializerOptions
            {
                WriteIndented = true,
            });

            if (columnMetaData is null)
                continue;

            td.Columns.Add(new ColumnBindingModel(cell.ToString()!)
            {
                DbType = columnMetaData.TryGetValue("DbType", out object dbType) ? (DbType)Enum.Parse(typeof(DbType), dbType.ToString()) : default,
                DatabaseType = columnMetaData.TryGetValue("DbType", out object dType) ? $"DbType.{dType}" : default!,
                CSharpType = columnMetaData.TryGetValue("Type", out object type) ? type.ToString() : default!,
                IsPrimaryKey = columnMetaData.TryGetValue("IsPrimaryKey", out object isPrimaryKey) ? Convert.ToBoolean(isPrimaryKey.ToString()) : default,
                IsNullable = columnMetaData.TryGetValue("IsNullable", out object isNullable) ? Convert.ToBoolean(isNullable.ToString()) : default,
                IsIdentity = columnMetaData.TryGetValue("IsIdentity", out object isIdentity) ? Convert.ToBoolean(isIdentity.ToString()) : default,
                MaxLength = columnMetaData.TryGetValue("MaxLength", out object maxLength) ? Convert.ToInt32(maxLength.ToString()) : default,
                IsAutoGenerated = columnMetaData.TryGetValue("IsAutoGenerated", out object isAutoGenerated) ? Convert.ToBoolean(isAutoGenerated.ToString()) : default,
                NativeType = columnMetaData.TryGetValue("NativeType", out object nativeType) ? nativeType.ToString() : default!,
            });
        }
    }

    private static IList<List<string?>> FillDataRows(XSSFSheet sheet, TableBindingModel td, int cellCount)
    {
        IList<List<string?>> dataRows = new List<List<string?>>();

        for (int i = sheet.FirstRowNum + 1; i <= sheet.LastRowNum; i++)
        {
            List<string?> rowList = new();
            IRow row = sheet.GetRow(i);
            if (row == null)
                continue;
            if (row.Cells.All(d => d.CellType == CellType.Blank))
                continue;

            for (int j = row.FirstCellNum; j < cellCount; j++)
            {
                //Skip timestamp column data
                if (td.Columns[j].IsAutoGenerated)
                    continue;

                rowList.Add(row.GetCell(j) == null ? "string.Empty" :
                    ConvertObjectValToCSharpType(row.GetCell(j), td.Columns[j].DbType, td.Columns[j].NativeType));
            }

            if (rowList.Count > 0)
                dataRows.Add(rowList);
        }

        return dataRows;
    }

    private static string ConvertObjectValToCSharpType(object rowValue, DbType columnType, string nativeType)
    {
        if (rowValue.ToString() == "NULL")
            return "NULL";

        return columnType switch
        {
            DbType.Binary => nativeType == "varbinary"
                ? $@"""{rowValue}"".ToCharArray().Select(c => (byte)c).ToArray()"
                : $"BitConverter.GetBytes(Convert.ToUInt64({rowValue}))",
            DbType.Boolean => rowValue.ToString() == "0" ? "false" : "true",
            DbType.AnsiStringFixedLength => rowValue.ToString(),
            DbType.StringFixedLength => rowValue.ToString(),
            DbType.String => rowValue.ToString(),
            DbType.AnsiString => rowValue.ToString(),
            DbType.Xml => rowValue.ToString(),
            DbType.DateTime => $@"DateTime.Parse(""{rowValue}"")",
            DbType.Date => $@"DateTime.Parse(""{rowValue}"")",
            DbType.Time => $@"DateTime.Parse(""{rowValue}"")",
            DbType.DateTime2 => $@"DateTime.Parse(""{rowValue}"")",
            DbType.Decimal => rowValue.ToString(),
            DbType.Int64 => rowValue.ToString(),
            DbType.Double => rowValue.ToString(),
            DbType.Int32 => rowValue.ToString(),
            DbType.Single => rowValue.ToString(),
            DbType.Int16 => rowValue.ToString(),
            DbType.Byte => rowValue.ToString(),
            DbType.Guid => $@"new Guid((string)""{rowValue}"")",
            DbType.DateTimeOffset => $@"DateTimeOffset.Parse((string)""{rowValue}"")",
            _ => $@"""{rowValue}""",
        };
    }

    private async Task<string> RenderTemplate(string templateName, object modelData)
    {
        Template template = await ParseTemplate(templateName, Assembly.GetExecutingAssembly(), GetType()).ConfigureAwait(false);
        return template.Render(Hash.FromAnonymousObject(new { model = modelData }));
    }

    private static void RegisterTypes()
    {
        Template.RegisterSafeType(typeof(Type), typeof(Type).GetProperties().Select(p => p.Name).ToArray());
        Template.RegisterSafeType(typeof(ExtensionMethodsGeneratorOptions),
            typeof(ExtensionMethodsGeneratorOptions).GetProperties().Select(p => p.Name).ToArray());
        Template.RegisterSafeType(typeof(Flavor), typeof(Flavor).GetProperties().Select(p => p.Name).ToArray());
        Template.RegisterSafeType(typeof(TableBindingModel),
            typeof(TableDefinition).GetProperties().Select(p => p.Name).ToArray());
        Template.RegisterSafeType(typeof(ColumnBindingModel), typeof(ColumnBindingModel).GetProperties().Select(p => p.Name).ToArray());
        Template.RegisterSafeType(typeof(ColumnDefinition),
            typeof(ColumnDefinition).GetProperties().Select(p => p.Name).ToArray());
    }
}
